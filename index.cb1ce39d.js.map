{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".button.start\");\nconst $09e991522ca7e64e$var$restartButton = document.querySelector(\".button.restart\");\nconst $09e991522ca7e64e$var$allRows = document.querySelectorAll(\".field-row\");\nconst $09e991522ca7e64e$var$allCells = document.querySelectorAll(\".field-cell\");\nconst $09e991522ca7e64e$var$winMessage = document.querySelector(\".message.message-win\");\nconst $09e991522ca7e64e$var$loseMessage = document.querySelector(\".message.message-lose\");\nconst $09e991522ca7e64e$var$startMessage = document.querySelector(\".message.message-start\");\nconst $09e991522ca7e64e$var$gameScore = document.querySelector(\".game-score\");\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.initialState = initialState.map((row)=>[\n                ...row\n            ]);\n        Object.freeze(this.initialState);\n        this.gameBoard = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.status = \"idle\";\n        this.score = 0;\n    }\n    start() {\n        this.status = \"playing\";\n        this.generateTile(2);\n    }\n    restart() {\n        this.gameBoard = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.status = \"idle\";\n        this.score = 0;\n    }\n    getStatus() {\n        return this.status;\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.gameBoard;\n    }\n    isGameBoardFull() {\n        return this.gameBoard.flat().every((n)=>n !== 0);\n    }\n    generateTile(times = 1) {\n        if (this.isGameBoardFull()) return;\n        for(let n = 0; n < times; n++){\n            let newTilePosition;\n            do newTilePosition = [\n                Math.floor(Math.random() * 4),\n                Math.floor(Math.random() * 4)\n            ];\n            while (this.gameBoard[newTilePosition[0]][newTilePosition[1]] !== 0);\n            const addedNumber = Math.random() < 0.9 ? 2 : 4;\n            this.gameBoard[newTilePosition[0]][newTilePosition[1]] = addedNumber;\n            this.checkForWin();\n            this.checkForLose();\n        }\n    }\n    checkForWin() {\n        for (const row of this.gameBoard){\n            for (const n of row)if (n === 2048) this.status = \"win\";\n        }\n    }\n    checkForLose() {\n        if (!this.canMove()) this.status = \"lose\";\n    }\n    move(direction) {\n        if (this.status !== \"playing\") return;\n        switch(direction){\n            case \"left\":\n                this.moveLeft();\n                break;\n            case \"right\":\n                this.moveRight();\n                break;\n            case \"up\":\n                this.moveUp();\n                break;\n            case \"down\":\n                this.moveDown();\n                break;\n        }\n        this.checkForWin();\n        this.checkForLose();\n    }\n    transposeState(state) {\n        const result = [];\n        for(let col = 0; col < 4; col++){\n            result[col] = [];\n            for(let row = 0; row < 4; row++)result[col][row] = state[row][col];\n        }\n        return result;\n    }\n    moveLeft(withGeneration = true) {\n        if (this.status !== \"playing\") return;\n        let moved = false;\n        for(let row = 0; row < this.gameBoard.length; row++){\n            const newRow = this.shiftAndMerge(this.gameBoard[row]);\n            if (newRow.join(\"\") !== this.gameBoard[row].join(\"\")) moved = true;\n            this.gameBoard[row] = newRow;\n        }\n        if (withGeneration && moved) this.generateTile();\n        return moved;\n    }\n    moveRight(withGeneration = true) {\n        if (this.status !== \"playing\") return;\n        let moved = false;\n        for(let row = 0; row < this.gameBoard.length; row++){\n            const reversedRow = this.gameBoard[row].slice().reverse();\n            const newRow = this.shiftAndMerge(reversedRow).reverse();\n            if (newRow.join(\"\") !== this.gameBoard[row].join(\"\")) moved = true;\n            this.gameBoard[row] = newRow;\n        }\n        if (withGeneration && moved) this.generateTile();\n        return moved;\n    }\n    moveUp() {\n        if (this.status !== \"playing\") return;\n        this.gameBoard = this.transposeState(this.gameBoard);\n        const moved = this.moveLeft(false);\n        this.gameBoard = this.transposeState(this.gameBoard);\n        if (moved) this.generateTile();\n        return moved;\n    }\n    moveDown() {\n        if (this.status !== \"playing\") return;\n        this.gameBoard = this.transposeState(this.gameBoard);\n        const moved = this.moveRight(false);\n        this.gameBoard = this.transposeState(this.gameBoard);\n        if (moved) this.generateTile();\n        return moved;\n    }\n    shiftAndMerge(row) {\n        const shifted = row.filter((val)=>val !== 0);\n        for(let i = 0; i < shifted.length - 1; i++)if (shifted[i] === shifted[i + 1]) {\n            shifted[i] *= 2;\n            this.score += shifted[i];\n            shifted.splice(i + 1, 1);\n        }\n        while(shifted.length < 4)shifted.push(0);\n        return shifted;\n    }\n    canMove() {\n        for(let row = 0; row < this.gameBoard.length; row++)for(let col = 0; col < this.gameBoard[row].length; col++){\n            if (this.gameBoard[row][col] === 0) return true;\n            if (col < 3 && this.gameBoard[row][col] === this.gameBoard[row][col + 1]) return true;\n            if (row < 3 && this.gameBoard[row][col] === this.gameBoard[row + 1][col]) return true;\n        }\n        return false;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nfunction $09e991522ca7e64e$var$addCellClass() {\n    $09e991522ca7e64e$var$allCells.forEach((cell)=>{\n        cell.className = \"field-cell\";\n        if (cell.innerHTML) cell.classList.add(`field-cell--${cell.innerHTML}`);\n    });\n}\nfunction $09e991522ca7e64e$var$render() {\n    $09e991522ca7e64e$var$game.getState().forEach((row, rowIndex)=>{\n        row.forEach((cell, cellIndex)=>{\n            const cellElement = $09e991522ca7e64e$var$allRows[rowIndex].children[cellIndex];\n            cellElement.innerHTML = cell || \"\";\n        });\n    });\n    $09e991522ca7e64e$var$addCellClass();\n    $09e991522ca7e64e$var$gameScore.innerHTML = $09e991522ca7e64e$var$game.getScore();\n    switch($09e991522ca7e64e$var$game.getStatus()){\n        case \"win\":\n            $09e991522ca7e64e$var$winMessage.classList.remove(\"hidden\");\n            $09e991522ca7e64e$var$loseMessage.classList.add(\"hidden\");\n            $09e991522ca7e64e$var$startMessage.classList.add(\"hidden\");\n            break;\n        case \"lose\":\n            $09e991522ca7e64e$var$loseMessage.classList.remove(\"hidden\");\n            $09e991522ca7e64e$var$winMessage.classList.add(\"hidden\");\n            $09e991522ca7e64e$var$startMessage.classList.add(\"hidden\");\n            break;\n        case \"playing\":\n            $09e991522ca7e64e$var$winMessage.classList.add(\"hidden\");\n            $09e991522ca7e64e$var$loseMessage.classList.add(\"hidden\");\n            $09e991522ca7e64e$var$startMessage.classList.add(\"hidden\");\n            break;\n        case \"idle\":\n        default:\n            $09e991522ca7e64e$var$startMessage.classList.remove(\"hidden\");\n            $09e991522ca7e64e$var$winMessage.classList.add(\"hidden\");\n            $09e991522ca7e64e$var$loseMessage.classList.add(\"hidden\");\n            break;\n    }\n}\nfunction $09e991522ca7e64e$var$startGame() {\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$startButton.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$restartButton.classList.remove(\"hidden\");\n    $09e991522ca7e64e$var$render();\n    document.addEventListener(\"keydown\", $09e991522ca7e64e$var$handleKeyPress);\n}\nfunction $09e991522ca7e64e$var$restartGame() {\n    $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$startButton.classList.remove(\"hidden\");\n    $09e991522ca7e64e$var$restartButton.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$render();\n    document.removeEventListener(\"keydown\", $09e991522ca7e64e$var$handleKeyPress);\n}\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", $09e991522ca7e64e$var$startGame);\n$09e991522ca7e64e$var$restartButton.addEventListener(\"click\", $09e991522ca7e64e$var$restartGame);\nlet $09e991522ca7e64e$var$isKeyPressed = false;\nfunction $09e991522ca7e64e$var$handleKeyPress(e) {\n    if ($09e991522ca7e64e$var$game.getStatus() === \"playing\" && !$09e991522ca7e64e$var$isKeyPressed) {\n        $09e991522ca7e64e$var$isKeyPressed = true;\n        switch(e.key){\n            case \"ArrowLeft\":\n                $09e991522ca7e64e$var$game.moveLeft();\n                break;\n            case \"ArrowRight\":\n                $09e991522ca7e64e$var$game.moveRight();\n                break;\n            case \"ArrowUp\":\n                $09e991522ca7e64e$var$game.moveUp();\n                break;\n            case \"ArrowDown\":\n                $09e991522ca7e64e$var$game.moveDown();\n                break;\n            default:\n                $09e991522ca7e64e$var$isKeyPressed = false;\n                return;\n        }\n        $09e991522ca7e64e$var$game.checkForWin();\n        $09e991522ca7e64e$var$game.checkForLose();\n        $09e991522ca7e64e$var$render();\n        if ($09e991522ca7e64e$var$game.getStatus() !== \"playing\") document.removeEventListener(\"keydown\", $09e991522ca7e64e$var$handleKeyPress);\n    }\n}\nfunction $09e991522ca7e64e$var$handleKeyUp() {\n    $09e991522ca7e64e$var$isKeyPressed = false;\n}\ndocument.addEventListener(\"keydown\", $09e991522ca7e64e$var$handleKeyPress);\ndocument.addEventListener(\"keyup\", $09e991522ca7e64e$var$handleKeyUp);\n\n\n//# sourceMappingURL=index.cb1ce39d.js.map\n","'use strict';\n\nconst startButton = document.querySelector('.button.start');\nconst restartButton = document.querySelector('.button.restart');\nconst allRows = document.querySelectorAll('.field-row');\nconst allCells = document.querySelectorAll('.field-cell');\n\nconst winMessage = document.querySelector('.message.message-win');\nconst loseMessage = document.querySelector('.message.message-lose');\nconst startMessage = document.querySelector('.message.message-start');\nconst gameScore = document.querySelector('.game-score');\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nfunction addCellClass() {\n  allCells.forEach((cell) => {\n    cell.className = 'field-cell';\n\n    if (cell.innerHTML) {\n      cell.classList.add(`field-cell--${cell.innerHTML}`);\n    }\n  });\n}\n\nfunction render() {\n  game.getState().forEach((row, rowIndex) => {\n    row.forEach((cell, cellIndex) => {\n      const cellElement = allRows[rowIndex].children[cellIndex];\n\n      cellElement.innerHTML = cell || '';\n    });\n  });\n\n  addCellClass();\n\n  gameScore.innerHTML = game.getScore();\n\n  switch (game.getStatus()) {\n    case 'win':\n      winMessage.classList.remove('hidden');\n      loseMessage.classList.add('hidden');\n      startMessage.classList.add('hidden');\n      break;\n    case 'lose':\n      loseMessage.classList.remove('hidden');\n      winMessage.classList.add('hidden');\n      startMessage.classList.add('hidden');\n      break;\n    case 'playing':\n      winMessage.classList.add('hidden');\n      loseMessage.classList.add('hidden');\n      startMessage.classList.add('hidden');\n      break;\n    case 'idle':\n    default:\n      startMessage.classList.remove('hidden');\n      winMessage.classList.add('hidden');\n      loseMessage.classList.add('hidden');\n      break;\n  }\n}\n\nfunction startGame() {\n  game.start();\n\n  startButton.classList.add('hidden');\n  restartButton.classList.remove('hidden');\n\n  render();\n\n  document.addEventListener('keydown', handleKeyPress);\n}\n\nfunction restartGame() {\n  game.restart();\n\n  startButton.classList.remove('hidden');\n  restartButton.classList.add('hidden');\n\n  render();\n\n  document.removeEventListener('keydown', handleKeyPress);\n}\n\nstartButton.addEventListener('click', startGame);\nrestartButton.addEventListener('click', restartGame);\n\nlet isKeyPressed = false;\n\nfunction handleKeyPress(e) {\n  if (game.getStatus() === 'playing' && !isKeyPressed) {\n    isKeyPressed = true;\n\n    switch (e.key) {\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n      default:\n        isKeyPressed = false;\n\n        return;\n    }\n\n    game.checkForWin();\n    game.checkForLose();\n    render();\n\n    if (game.getStatus() !== 'playing') {\n      document.removeEventListener('keydown', handleKeyPress);\n    }\n  }\n}\n\nfunction handleKeyUp() {\n  isKeyPressed = false;\n}\n\ndocument.addEventListener('keydown', handleKeyPress);\ndocument.addEventListener('keyup', handleKeyUp);\n","'use strict';\n\nclass Game {\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.initialState = initialState.map((row) => [...row]);\n    Object.freeze(this.initialState);\n    this.gameBoard = this.initialState.map((row) => [...row]);\n    this.status = 'idle';\n    this.score = 0;\n  }\n\n  start() {\n    this.status = 'playing';\n    this.generateTile(2);\n  }\n\n  restart() {\n    this.gameBoard = this.initialState.map((row) => [...row]);\n    this.status = 'idle';\n    this.score = 0;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  getScore() {\n    return this.score;\n  }\n  getState() {\n    return this.gameBoard;\n  }\n\n  isGameBoardFull() {\n    return this.gameBoard.flat().every((n) => n !== 0);\n  }\n\n  generateTile(times = 1) {\n    if (this.isGameBoardFull()) {\n      return;\n    }\n\n    for (let n = 0; n < times; n++) {\n      let newTilePosition;\n\n      do {\n        newTilePosition = [\n          Math.floor(Math.random() * 4),\n          Math.floor(Math.random() * 4),\n        ];\n      } while (this.gameBoard[newTilePosition[0]][newTilePosition[1]] !== 0);\n\n      const addedNumber = Math.random() < 0.9 ? 2 : 4;\n\n      this.gameBoard[newTilePosition[0]][newTilePosition[1]] = addedNumber;\n\n      this.checkForWin();\n      this.checkForLose();\n    }\n  }\n\n  checkForWin() {\n    for (const row of this.gameBoard) {\n      for (const n of row) {\n        if (n === 2048) {\n          this.status = 'win';\n        }\n      }\n    }\n  }\n\n  checkForLose() {\n    if (!this.canMove()) {\n      this.status = 'lose';\n    }\n  }\n\n  move(direction) {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    switch (direction) {\n      case 'left':\n        this.moveLeft();\n        break;\n      case 'right':\n        this.moveRight();\n        break;\n      case 'up':\n        this.moveUp();\n        break;\n      case 'down':\n        this.moveDown();\n        break;\n    }\n\n    this.checkForWin();\n    this.checkForLose();\n  }\n\n  transposeState(state) {\n    const result = [];\n\n    for (let col = 0; col < 4; col++) {\n      result[col] = [];\n\n      for (let row = 0; row < 4; row++) {\n        result[col][row] = state[row][col];\n      }\n    }\n\n    return result;\n  }\n\n  moveLeft(withGeneration = true) {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let row = 0; row < this.gameBoard.length; row++) {\n      const newRow = this.shiftAndMerge(this.gameBoard[row]);\n\n      if (newRow.join('') !== this.gameBoard[row].join('')) {\n        moved = true;\n      }\n      this.gameBoard[row] = newRow;\n    }\n\n    if (withGeneration && moved) {\n      this.generateTile();\n    }\n\n    return moved;\n  }\n  moveRight(withGeneration = true) {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let row = 0; row < this.gameBoard.length; row++) {\n      const reversedRow = this.gameBoard[row].slice().reverse();\n      const newRow = this.shiftAndMerge(reversedRow).reverse();\n\n      if (newRow.join('') !== this.gameBoard[row].join('')) {\n        moved = true;\n      }\n      this.gameBoard[row] = newRow;\n    }\n\n    if (withGeneration && moved) {\n      this.generateTile();\n    }\n\n    return moved;\n  }\n\n  moveUp() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    this.gameBoard = this.transposeState(this.gameBoard);\n\n    const moved = this.moveLeft(false);\n\n    this.gameBoard = this.transposeState(this.gameBoard);\n\n    if (moved) {\n      this.generateTile();\n    }\n\n    return moved;\n  }\n  moveDown() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    this.gameBoard = this.transposeState(this.gameBoard);\n\n    const moved = this.moveRight(false);\n\n    this.gameBoard = this.transposeState(this.gameBoard);\n\n    if (moved) {\n      this.generateTile();\n    }\n\n    return moved;\n  }\n\n  shiftAndMerge(row) {\n    const shifted = row.filter((val) => val !== 0);\n\n    for (let i = 0; i < shifted.length - 1; i++) {\n      if (shifted[i] === shifted[i + 1]) {\n        shifted[i] *= 2;\n        this.score += shifted[i];\n        shifted.splice(i + 1, 1);\n      }\n    }\n\n    while (shifted.length < 4) {\n      shifted.push(0);\n    }\n\n    return shifted;\n  }\n\n  canMove() {\n    for (let row = 0; row < this.gameBoard.length; row++) {\n      for (let col = 0; col < this.gameBoard[row].length; col++) {\n        if (this.gameBoard[row][col] === 0) {\n          return true;\n        }\n\n        if (\n          col < 3 &&\n          this.gameBoard[row][col] === this.gameBoard[row][col + 1]\n        ) {\n          return true;\n        }\n\n        if (\n          row < 3 &&\n          this.gameBoard[row][col] === this.gameBoard[row + 1][col]\n        ) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$startButton","document","querySelector","$09e991522ca7e64e$var$restartButton","$09e991522ca7e64e$var$allRows","querySelectorAll","$09e991522ca7e64e$var$allCells","$09e991522ca7e64e$var$winMessage","$09e991522ca7e64e$var$loseMessage","$09e991522ca7e64e$var$startMessage","$09e991522ca7e64e$var$gameScore","$09e991522ca7e64e$var$game","constructor","initialState","map","row","Object","freeze","gameBoard","status","score","start","generateTile","restart","getStatus","getScore","getState","isGameBoardFull","flat","every","n","times","newTilePosition","Math","floor","random","addedNumber","checkForWin","checkForLose","canMove","move","direction","moveLeft","moveRight","moveUp","moveDown","transposeState","state","result","col","withGeneration","moved","length","newRow","shiftAndMerge","join","reversedRow","slice","reverse","shifted","filter","val","i","splice","push","$09e991522ca7e64e$var$render","forEach","rowIndex","cell","cellIndex","cellElement","children","innerHTML","className","classList","add","remove","addEventListener","$09e991522ca7e64e$var$handleKeyPress","removeEventListener","$09e991522ca7e64e$var$isKeyPressed","e","key"],"version":3,"file":"index.cb1ce39d.js.map"}